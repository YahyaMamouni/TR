#include <stdio.h>
#include <stdlib.h>

#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "semphr.h"
#include "timers.h"
#include "event_groups.h"

#include "HardwareEmu.h"
#include "ControlPanelClient.h"

/** INFORMATIONS SUR LES PERIPHERIQUES ET COMMANDES
---------------------------------------------------
'V' : Vitesse du moteur (0-50)
'D' : Angle de braquage des roues avant en 1/10° de degré (10 -> 1°)
'T' : Vitesse de rotation de la tourelle du télémètre en 1/10°/s
'R' : Lecture de l'Azimuth de la tourelle en 1/10°
'U' : Distance mesure par le télémètre en 1/100 de mètre (en cm)
'X' : Position absolue X en cm
'Y' : Position absolue Y en cm
'Z' : Position absolue Z en cm
'N' : Numéro de la voiture (en fonction de l'ordre de connection)
'E' : Lecture des evènements (cf Annexe 2)
'H' : Donne le temps de course actuel
'S' : Temps du tour précédent
'M' : Mode de course :
    8 bits de poids fort: 1 Attente, 2 course, 3 essais libres)
    8 bits de poids faible : numero de piste
'C' : Informations sur le dernier capteur touché :
    8 bits de poids faible : numéro du capteur
    8 bits de poids fort : couleur ('R','J' ou 'V')
'J' : Proposition d'un code de dévérouillage.
    Une valeur de 0 à 5 par quartet.
'j' : Récupération du résultat de dernier code envoyé.
    0x77 si aucun code n'a été soumis.
    <0 si la réponse n'est pas disponible.
    0x0a0b avec a-> nombre de couleurs bien placées et b -> couleurs présentes mais mal placées.
'I' : Définition du nom du véhicule.
    Doit débuter par le caractère '#' et entraine le chargement de la configuration de piste correspondant au nom du véhicule si le nom se termine par '*'
'K' : Téléportation de la voiture sur le troncon de piste N (correspondant au capteur vert numero N).
    Attention à n'utiliser que pour des tests, les scores sont invalidés !


Contenu du Capteur de couleur;
Bit 0 : Point de passage Vert, remis à zéro lors de la lecture du périphérique 'C'
    1 : Point de passage Jaune, remis à zéro lors de la lecture du périphérique 'C'
    2 : Point de passage Rouge, remis à zéro lors de la lecture du périphérique 'C'
    3 : Point de passage Bleu, remis à zéro lors de la lecture du périphérique 'C'
    4 : Point de passage Cyan, remis à zéro lors de la lecture du périphérique 'C'
    5 : non utilisés
    6 : Collision avec le sol, Remise à zéro au changement de piste.
    7 : Point de passage course (vert), remis à zéro lors de la lecture du périphérique 'C'
    8 : La piste a changé , remis à zéro lors de la lecture du périphérique 'M'
    9 : Le mode de course a changé , remis à zéro lors de la lecture du périphérique 'M'
   10 : non utilisé
   11 : Le dernier point de passage est atteint la course est finie , remis à zéro au changement du mode de course.
   12 : La voiture est sortie de la piste.
   13 : Utilisation de la fonction de téléportation. Classement Invalidé. Remis à zero au changement de piste ou du mode de course.
   14 : Faux départ -> destruction de la voiture , remise à zéro au changement du mode de course.
   15 : Le Feu est Rouge ou orange
**/


int consigne_vitesse = 0;
int distance_telem = 0;
int consigne_distance = 0;
SemaphoreHandle_t CanSem;

//Q1
/*
void task_1(void * queue){
int i;
char nom[]="#VROUM*";
CanFrame cmd={{'I',0,0}};

	for(i=0;i<8 && nom[i];i++){
		cmd.data.val=nom[i];
		while(!CanTxReady())
            vTaskDelay(pdMS_TO_TICKS(1));
        CanTxSendFrame(cmd);
		vTaskDelay(pdMS_TO_TICKS(10));
	}

    while(1){

            char tmp[32];
            sprintf(tmp,"ad00:%d ",ad00);
            lcd_com(0x80);
            lcd_str(tmp);
            vTaskDelay(pdMS_TO_TICKS(100));
    }

}
*/

// Q2 - Q3
/*
void task_1(void * queue){

    CanFrame com ;
    com.data.id='T';
    com.data.rtr=0;
    com.data.val=450;

    if (CanTxReady()){
        CanTxSendFrame (com);
    }
    vTaskDelay(pdMS_TO_TICKS(2000));
    com.data.val=-450;
    if (CanTxReady()){
        CanTxSendFrame (com);
    }

}*/

// Q4
void task_1(void * queue){
int i;
char nom[]="#VROUM*";
CanFrame cmd ;
cmd.data.id='T';
cmd.data.rtr=0;
cmd.data.val=450;

	while (1){
		cmd.data.val=ad00;
		while(!CanTxReady())
            vTaskDelay(pdMS_TO_TICKS(1));
        CanTxSendFrame(cmd);
		vTaskDelay(pdMS_TO_TICKS(10));
	}


}

// Q6
void task_azimuth(){
CanFrame cmd, receive ;
cmd.data.id='R';
cmd.data.rtr=1;
int angle;
char tmp[32];
    while(1){
            if(CanTxReady()){
                CanTxSendFrame(cmd);
                vTaskDelay(pdMS_TO_TICKS(250));
                if (CanTxReady()){
                    CanRxReadFrame(&receive);
                    angle=(signed short)receive.data.val;
                }
            }
            sprintf(tmp,"Azimuth:%d ",angle/10);
            lcd_com(0xC0);
            lcd_str(tmp);
            vTaskDelay(pdMS_TO_TICKS(250));
    }
}

//Q7-8
void task_auto_reg(){
CanFrame cmd, receive,reg ;
cmd.data.id='R';
cmd.data.rtr=1;
reg.data.id='T';
reg.data.rtr = 0;
int angle;
char tmp[32];
    while(1){
            xSemaphoreTake(CanSem,portMAX_DELAY);
            if(CanTxReady()){
                CanTxSendFrame(cmd);
                vTaskDelay(pdMS_TO_TICKS(25));
                if (CanTxReady()){
                    CanRxReadFrame(&receive);
                    angle=(signed short)receive.data.val;
                }
            }
            if (((ad01*2)-1024) != angle){
                reg.data.val = ((ad01*2)-1024) - angle;
                while(!CanTxReady())
                    vTaskDelay(pdMS_TO_TICKS(1));
                CanTxSendFrame(reg);
                vTaskDelay(pdMS_TO_TICKS(10));

            }
        xSemaphoreGive(CanSem);
        vTaskDelay(pdMS_TO_TICKS(10));
        }

}

void timer1(TimerHandle_t p){
    static int j=0;
    j=(j)?0:1;
    led_j(j);

}

// Q5
void task_ad01(){
    while(1){
            char tmp[32];
            sprintf(tmp,"ad01:%d ",ad01);
            lcd_com(0x80);
            lcd_str(tmp);
            vTaskDelay(pdMS_TO_TICKS(250));
    }
}

// Q9

uint32_t ulInterrupt_Keyboard(){
    int key = KeyboardGetLastKey();
    if(key >= 48 && key <= 57){
        consigne_vitesse = (key - 48) * 5;
        led_r((consigne_vitesse > 10)?1:0);
    }
    return pdFALSE;
}

void task_vitesse(){
printf("Vitesse \n");
int i;
char nom[]="#VROUM*";
CanFrame cmd ;
cmd.data.id='V';
cmd.data.rtr=0;
cmd.data.val=0;

	while (1){
        //
		cmd.data.val=consigne_vitesse;
		xSemaphoreTake(CanSem,portMAX_DELAY);
		while(!CanTxReady())
            vTaskDelay(pdMS_TO_TICKS(1));

        CanTxSendFrame(cmd);
		vTaskDelay(pdMS_TO_TICKS(10));
        xSemaphoreGive(CanSem);
        vTaskDelay(pdMS_TO_TICKS(10));
	}


}

// Q10
void task_distance_mur(){
    printf("Distance mur \n");
    CanFrame com = {{'U',1,0}};
    CanFrame receive;

    while(1){
            //
            xSemaphoreTake(CanSem,portMAX_DELAY);
            if(CanTxReady()){

                CanTxSendFrame(com);
                vTaskDelay(pdMS_TO_TICKS(25));

                if (CanTxReady()){
                    CanRxReadFrame(&receive);
                    distance_telem=(signed short)receive.data.val;
                    //
                }
                xSemaphoreGive(CanSem);
                vTaskDelay(pdMS_TO_TICKS(10));


            }
    }


}

void task_reg_roue(){
printf("REG ROUE \n");
CanFrame cmd, receive,reg ;
cmd.data.id='R';
cmd.data.rtr=0;
reg.data.id='D';
reg.data.rtr = 0;
int angle;
char tmp[32];

    while(1){
            //
            xSemaphoreTake(CanSem,portMAX_DELAY);
            if(CanTxReady()){

                CanTxSendFrame(cmd);
                vTaskDelay(pdMS_TO_TICKS(25));

                if (CanTxReady()){
                    CanRxReadFrame(&receive);
                    angle=(signed short)receive.data.val;
                }
            }
            printf("distance telem_laser : %d", distance_telem);
            consigne_distance = -(600 - distance_telem);
            if (abs(consigne_distance) < 150){
                reg.data.val = consigne_distance;
            }
            while(!CanTxReady())
                vTaskDelay(pdMS_TO_TICKS(1));
            CanTxSendFrame(reg);
            vTaskDelay(pdMS_TO_TICKS(10));
            xSemaphoreGive(CanSem);
            vTaskDelay(pdMS_TO_TICKS(10));

            }
            //


}



int main()
{
TaskHandle_t htask_1;
TimerHandle_t htimer1;
CanSem = xSemaphoreCreateMutex();

    HardwareInit(8,9);
    ControlPanelInit(7);
    //ControlPanelInitAddr("192.168.1.221",7);

    // Control panel
    vPortSetInterruptHandler(7, ulInterrupt_Keyboard);

    // Init semaphore


    printf("Demarrage des taches\n");
    //xTaskCreate(task_1,"Tache 1",configMINIMAL_STACK_SIZE,NULL,6,&htask_1);
    //xTaskCreate(task_ad01,"Tache ad01",configMINIMAL_STACK_SIZE,NULL,6,&htask_1);
    //xTaskCreate(task_azimuth,"Tache azimuth",configMINIMAL_STACK_SIZE,NULL,6,&htask_1);
    xTaskCreate(task_auto_reg,"Tache regulation",configMINIMAL_STACK_SIZE,NULL,6,&htask_1);
    xTaskCreate(task_distance_mur,"distance mur",configMINIMAL_STACK_SIZE,NULL,6,&htask_1);
    xTaskCreate(task_vitesse,"Tache vitesse",configMINIMAL_STACK_SIZE,NULL,6,&htask_1);

    xTaskCreate(task_reg_roue,"regu roue",configMINIMAL_STACK_SIZE,NULL,6,&htask_1);
    htimer1=xTimerCreate("Timer 1",250,pdTRUE,NULL,timer1);
    xTimerStart(htimer1,0);
    vTaskStartScheduler();
    HardwareHalt();
    return 0;
}

